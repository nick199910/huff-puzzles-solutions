
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

// 数组长度(length)，已读数组长度(readed)，当前元素位置(now)，下一个元素的位置(next), 求和数据(sum)
#define function sumArray(uint256[]) payable returns(uint256)

// 使用fix readed 表示对readed 的更新, 使用
#define macro SA() = takes(0) returns(0) {
    0x24 calldataload // [length]

    0x01 // [readed, length]

    0x00 // [sum, readed, length]
    0x64 swap1 // [sum, next, readed, length]
    0x44 // [now, sum, next, readed, length]

    calldataload // [element, sum, next, readed, length]

    add // [sum, next, readed, length] add sum
    dup4 dup4 // [readed, length, sum, next, readed, length]
    lt 					// [readed < length, sum, next, readed, length]
	iszero
	array_end jumpi		// [sum, now, readed, length]

    array_for: // [sum, now, readed, length]
    
    // =============================
    dup2 calldataload // [element, sum, now, readed, length]
    add // [sum, now, readed, length] add sum

    swap1 0x20 add // [next, sum, readed, length]
    swap2 0x01 add 		// [readed, sum, next, length] fix readed

    swap1			// [sum, readed, next, length]
	dup4 dup3 lt 		// [readed < length, sum, readed, next, length]
	iszero
	array_end jumpi		// [sum, readed, next, length]

    // ==================================
    dup3 calldataload	// [element, sum, readed, now, length]
	add 			// [sum, readed, now, length] 	add sum
	swap2 0x20 add 		// [next, readed, sum, length]	fix next
	swap1 0x01 add 		// [readed, next, sum, length]	fix readed
	swap2			// [sum, next, readed, length]

	dup4 dup4		// [readed, length, sum, next, readed, length]
	lt 			// [readed < length, sum, next, readed, length]
	iszero
	array_end jumpi		// [sum, now, readed, length]



    array_for jump // 用两次的目的可以保证循环读到的内容是一致的

    array_end:
	0x00 mstore
	0x20 0x00 return

}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
  
    dup1 __FUNC_SIG(sumArray) eq sumArray jumpi

    // Revert if no function matches
    0x00 dup1 revert

    sumArray:
        SA()

}